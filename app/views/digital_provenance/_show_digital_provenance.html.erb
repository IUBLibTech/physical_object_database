<div class="left">
	<%= nested_form_for(@dp, url: {controller: 'digital_provenance', action: 'update'}) do |dp| %>
		<div>
			<h2>Digital Provenance</h2>
				<% if @edit_mode %>
					<%= dp.submit "Update Digital Provenance" %>
				<% end %>
			<%= dp.hidden_field :digitizing_entity, value: "IU Media Digitization Studios" %>
			<table>
				<tr>
					<th rowspan="4">Comments<%= dp_requirement(:comments) %></th>
					<td rowspan="4">
						<%= dp.text_area(:comments, rows: "6", readonly: !@edit_mode, disabled: dp_na(:comments)) %>
					</td>
					<th rowspan="4">Cleaning Comment<%= dp_requirement(:cleaning_comment) %></th>
					<td rowspan="4">
						<%= dp.text_area(:cleaning_comment, rows: "6", readonly: !@edit_mode, disabled: dp_na(:cleaning_comment)) %>
					</td>
					<th>Cleaning Date<%= dp_requirement(:cleaning_date) %></th>
					<td>
						<%= dp.text_field(:cleaning_date, readonly: !@edit_mode, class: @edit_mode ? "date" : "", value: @dp.cleaning_date.blank? ? "" : @dp.cleaning_date.in_time_zone("UTC").strftime("%m/%d/%Y"), disabled: dp_na(:cleaning_date)) %>
					</td>
				</tr>
				<tr>
					<th>Baking Date<%= dp_requirement(:baking) %></th>
					<td>
						<%= dp.text_field(:baking, readonly: !@edit_mode, class: @edit_mode ? "date" : "", value: @dp.baking.blank? ? "" : @dp.baking.in_time_zone("UTC").strftime("%m/%d/%Y"), disabled: dp_na(:baking)) %>
					</td>
				</tr>
				<tr>
					<th>Repaired<%= dp_requirement(:repaired) %></th>
					<td>
						<%= dp.check_box(:repaired, readonly: !@edit_mode || dp_na(:repaired)) %>
					</td>
				</tr>
				<tr>
					<th>Digitization Time (in minutes)<%= dp_requirement(:duration) %></th>
					<td>
						<% if @edit_mode %>
						  <%= dp.number_field(:duration, readonly: !@edit_mode, disabled: dp_na(:duration)) %>
						<% else %>
						  <%= dp.text_field(:duration, readonly: !@edit_mode, disabled: dp_na(:duration)) %>
						<% end %>
					</td>
				</tr>
				<tr>
					<th>Batch Processing Flag<%= dp_requirement(:batch_processing_flag) %></th>
					<td colspan="5">
						<%= dp.text_field(:batch_processing_flag, readonly: !@edit_mode, disabled: dp_na(:batch_processing_flag)) %>
					</td>
				</tr>
			</table>				
		</div>
		<%# the fields for kluge %>
		<% dp.fields_for :physical_object do |df| %>
		<% end %>
		<div id="file_holder">
			<h2>Digital Files</h2>
			<% if @dp.digital_file_provenances.size == 0 and !@edit_mode %>
				Digital files have not been received yet...
			<% else %>
				<%= dp.fields_for :digital_file_provenances do |df| %>
					<%= render 'digital_provenance/digital_file_provenance', f: df, dp: dp %>
				<% end %>
			<% end %>
		</div>
    <div class="clear">
      <% if @edit_mode && policy(@dp).edit? %>
        <% TechnicalMetadatumModule.tm_digital_provenance_files[@physical_object.format].each_with_index do |file_type, index| %>
          <%= dp.link_to_add "Add #{file_type} File", :digital_file_provenances, :data => { :target => "#file_holder" } if policy(@dp).edit? %>
          <%= "&nbsp;-&nbsp;".html_safe if (index + 1) < TechnicalMetadatumModule.tm_digital_provenance_files[@physical_object.format].size %>
        <% end %>
      <% end %>
    </div>
	<% end %>
	<div class="clear">
		<h2>Digital Statuses</h2>
	</div>

	<script type='text/javascript'>
		$(function (){
			$('.date').datepicker();
		});
		$(document).on('nested:fieldAdded', function(event){
			var ext = <%= (TechnicalMetadatumModule.tm_genres[@physical_object.format] == :audio ? "'wav'" : "'mkv'").html_safe%>;
			// the "Add Digital File/PrestInt" link
			var trig = event.currentTarget.activeElement;
			// special case handling for .tiff, .zip, .mp4 files for imaging format
			<% if @physical_object.format.in? AnalogSoundDiscImagingTm::TM_FORMAT %>
			if (trig.text == 'Add Digital Master File') {
				ext = 'tiff';
                        } else if (trig.text == 'Add Miscellaneous File') {
				ext = 'zip';
			} else if (trig.text == 'Add Access File') {
				ext = 'mp4';
                        }
			<% end %>
			el = $('.filename').last();
			var v = "";
			if ( el.val().length == 0) {
				bc = $("#barcode").first().text();
				var visibleTables = $('.fields').filter(function() {
					return this.style.display != 'none';
				});
                                visibleTables = $(visibleTables).find('table.digiprov');
				var visibleMasterTables = $(visibleTables).find('.filename').filter(function() {
					return this.value.indexOf('_pres.') != -1;
				});
				var fn = $(visibleMasterTables);
				var pattern = "_[0-9]{2}_";
				var seq = fn.length > 0 ? fn.last().val().substring(fn.last().val().search(pattern)+1, fn.last().val().search(pattern)+3) : "00";

				if (trig.text != "Add Digital Master File") {

					// prep to copy over all values from the previous file
					var copyTable = visibleTables[visibleTables.length - 2];
					var tds = $(copyTable).find('td > input');
					// because collection_select pads the options with a "select signal chain" - the index can be off when
					// the creating a file from an existing/already saved master file. Determine whether to add one
					var add = $(copyTable).find('select > option').first()[0].firstChild.textContent.startsWith("Select a signal") ? 0 : 1;
					var selectIndex = $(copyTable).find('select').first().prop('selectedIndex') + add;
}
				if (trig.text == "Add Digital Master File") {
                                        $(visibleTables).last().addClass('pres');
					seq = ("000" + (parseFloat(seq) + 1)).slice(-2);
					v = "MDPI_"+bc+"_"+seq+"_pres."+ext;
				} else if (trig.text == "Add PresRef File") {
                                        $(visibleTables).last().addClass('presRef');
                                        v = "MDPI_"+bc+"_"+seq+"_presRef."+ext;
                                        // add reference tone default value
                                        $(visibleTables).last().find('td > input')[15].value = '440';
                                } else if (trig.text == "Add PresInt File") {
					$(visibleTables).last().addClass('presInt');
					v = "MDPI_"+bc+"_"+seq+"_presInt."+ext;
                                        // copy over any values from the previous file
					for (x = 5; x < 13; x++) {
						val =  tds[x].value;
						$(visibleTables).last().find('td > input')[x].value = val;
					}
					$(visibleTables).last().find('select option').eq(selectIndex).prop('selected', true);
                                } else if (trig.text == "Add IntRef File") {
					$(visibleTables).last().addClass('intRef');
					v = "MDPI_"+bc+"_"+seq+"_intRef."+ext;
                                        // copy over any values from the previous file
					for (x = 5; x < 13; x++) {
						val =  tds[x].value;
						$(visibleTables).last().find('td > input')[x].value = val;
					}
					$(visibleTables).last().find('select option').eq(selectIndex).prop('selected', true);
                                        // add reference tone default value
                                        $(visibleTables).last().find('td > input')[15].value = '440';
                                } else if (trig.text == "Add Prod File") {
					$(visibleTables).last().addClass('prod');
					v = "MDPI_"+bc+"_"+seq+"_prod."+ext;
                                        // copy over any values from the previous file
					for (x = 5; x < 13; x++) {
						val =  tds[x].value;
						$(visibleTables).last().find('td > input')[x].value = val;
					}
					$(visibleTables).last().find('select option').eq(selectIndex).prop('selected', true);
                                } else if (trig.text == "Add Access File") {
					$(visibleTables).last().addClass('access');
					v = "MDPI_"+bc+"_"+seq+"_access."+ext;
                                        // copy over any values from the previous file
					for (x = 5; x < 13; x++) {
						val =  tds[x].value;
						$(visibleTables).last().find('td > input')[x].value = val;
					}
					$(visibleTables).last().find('select option').eq(selectIndex).prop('selected', true);
                                } else if (trig.text == "Add Miscellaneous File") {
					$(visibleTables).last().addClass('files');
					v = "MDPI_"+bc+"_"+seq+"_files."+ext;
                                        // copy over any values from the previous file
					for (x = 5; x < 13; x++) {
						val =  tds[x].value;
						$(visibleTables).last().find('td > input')[x].value = val;
					}
					$(visibleTables).last().find('select option').eq(selectIndex).prop('selected', true);
				}
                                $(visibleTables).last().find('.filename_button').prop('value', v);
                                $(visibleTables).last().find('.filename_button').attr('data-clipboard-text', v);
				el.val(v);
			}
		});
	</script>
</div>
