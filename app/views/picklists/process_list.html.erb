<h2>Picklist <i><%= @picklist.name %></i> </h2>
<% if (@box or @bin) %>
	<h2>Packing <%= @box ? "Box" : "Bin" %> <i><%= @box ? @box.mdpi_barcode : @bin.identifier %></i></h2>
	<div>
		<%= form_for(:picklist, url: {action: 'container_full'}) do |f| %>
			<% if @box %>
				<%= hidden_field_tag "box_id", @box.id %>
				Bin barcode for box: <%= text_field_tag('bin_barcode', nil, maxlength: "14", size: "14", class: "mdpi") %>
				<br />
			<% elsif @bin %>
				<%= hidden_field_tag "bin_id", @bin.id %>
			<% end %>
			Mark <%= @box ? "<i>Box #{@box.mdpi_barcode}</i>".html_safe : "<i>Bin #{@bin.identifier}</i>".html_safe %> packed
			<%= f.submit("Packed") %>
		<% end %>
	</div>
<% else %>
	<h2>Manually Associating Items From Pick List <i><%= @picklist.name %></i></h2>
<% end %>
<%= render(partial: 'picklist_table', locals: {box: @box, bin: @bin}) %>

<script type="text/javascript">
	$(document).ready(function() {
		$("input[type='text'].mdpi").on("click", function () {
			if ($(this).val() == '0') {
   			$(this).select();
			}
		});

		// the function that handles the pack and unpack form posts when processing a picklist
		function ajax_picklist() {
			var el = $(this);
			var postData = $(this).serializeArray();
		  var formURL = $(this).attr("action");
		  $.ajax(
		  {
		      url : formURL,
		      type: "POST",
		      data : postData,
		      dataType: "html",
		      success:function(data, textStatus, jqXHR)
		      {
		      	// get a reference to the ajax call returned element, then replace the original with the new one, then bind the 
		      	// callback so the form can respond to the ajax call it makes. Finally, clear the ".notice" div of any previous
		      	// error messages that might be present
		      	newEl = $(jqXHR.responseText);
		      	el.replaceWith(newEl);
		      	newEl.submit(ajax_picklist);
		      	$(".notice").html("");
		      },
		      error: function(jqXHR, textStatus, errorThrown)
		      {
		        $(".notice").html(jqXHR.responseText);  
		      }
		  });
		}

		$("[id^=edit_physical_object_]").submit(ajax_picklist);


		$("[id^=remove_]").click(function(event) {
			var oref = $(this).attr("href");
			var id = $(this).attr("id").substring("remove_".length);
			var mdpi = $('#po_mdpi_barcode_'+id).val();
			if (mdpi > 0) {
				var params = {mdpi_barcode: mdpi}
				var href = $(this).attr("href")+"?"+jQuery.param(params);
				$(this).attr("href", href);
			}
			if (confirm("This will remove the Physical Object from the Pick List. Do you wish to continue?") == true) {
				var xhr = $.ajax($(this).attr("href", href)).
				done(function() {
					$("#edit_physical_object_"+id).remove();
					$(".notice").replaceWith("Physical Object removed from the Pick List.");
				}).
				fail(function() {
					alert("An error occured while trying to remove the item from the pick. The page will be refreshed...")
					location.reload();
				}).
				always(function() {
					var nt = window.open(window.location.protocol+"//"+window.location.host+"/physical_objects/"+id+"/edit", '_blank');
					nt.focus();
				});
			}
		});
	});
</script>